#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <fstream>
#include <Windows.h>

using namespace std;

struct Player {
    // структура с буквами пользователя, его айдишником, последним словом, и баллы
    int id;
    char letters[10]{};
    string last_world = " ";
    int points = 0;
};

//интерфейсы
void start();
void game();
void rules();
int end_screen();
int Main_menu();
void interface_end_screen();
void interface_Main_menu();
void interface_rules();
void interface_start();
void interface_game();
void interface_end_screen();
void enter_the_word(Player player, Player previous_player);
int normal_command_input(int min_command, int max_command);
// метка 
bool check_in_file(string search, fstream& fin);
char check_for_user_word(string user_word, Player current_player);
int input_count_of_players();
Player getting_letters_for_players(short id);
int letters_in_alphabet();
void vuvod_igrokof(Player players[]);
void points(Player current_player, string last_played_word);
void alpha_zapolnenie(char massive_alphabet[]);
//скелеты функций

char massive_alphabet_public[132]{};
Player players[4]{};
short* array_id = new short[132];
short counter = 132;
short players_in_game{};

//MAIN

int main()
{
    srand(time(0));
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    alpha_zapolnenie(massive_alphabet_public);
    for (unsigned short i{}; i < 132; i++) {
        array_id[i] = i;
    }
    /*
    значения status:
    0--завершение работы
    1--нормальная работа
    */
    int status = 1;

    while (status == 1)
    {
        status = Main_menu();
        if (status == 0)
        {
            break;
        }

        start();

        game();

        status = end_screen();

    }


    return 0;
}


int Main_menu()
{
    while (true)
    {
        interface_Main_menu();
        cout << "\nВведите \n 1--Начать партию \n 2--Правила \n 0--Выйти\n";
        int command;
        command = normal_command_input(0, 2);
        if (command == 2)
        {
            system("cls");
            rules();
        }
        else if (command == 0)
        {
            system("cls");
            return command;
        }
        else
        {
            system("cls");
            return command;
        }
        system("cls");

    }

}
// главное меню (начало)
void start()
{
    interface_start();
    players_in_game = input_count_of_players();
    for (unsigned short i{}; i < players_in_game; i++) {
        players[i] = getting_letters_for_players(i);
    }
    system("pause");
    system("cls");
}
// начало игры (ввод количества игроков)
void game()
{
    interface_game();
    //функция с интерфейсом игры, можно вызвать и в getting letters
    while (letters_in_alphabet() > 0) {
        vuvod_igrokof(players);
        enter_the_word(players[0], players[players_in_game-1]);
    }
    system("pause");
    system("cls");
}
// сама игра

int input_count_of_players() {
    int number_of_players{};
    cout << "input number of players: ";
    cin >> number_of_players;
    return number_of_players;
}

void enter_the_word(Player player, Player previous_player) {
    string word;
    while (true) {
        cout << "введите слова из представленных букв: ";
        getline(cin, word);
        fstream fin;
        fin.open("russian.txt");
        if (check_in_file(word, fin)) {
            if (check_for_user_word(word, player) == 'c') {
                player.last_world = word;
                points(player, previous_player.last_world);
                Player buffer;
                buffer = players[0];
                players[0] = players[players_in_game - 1];
                players[players_in_game - 1] = buffer;
                break;
            }
            else if (check_for_user_word(word,player) == 'e') {
                cout << "Введите корректное слово!!!";
            }
            else {

            }
        }
    }
}

/*int getRandomNumber(int i, int min, int max, int old_time_random)
{
    int time_random;
    if (i == 0)
    {
        time_t now = time(0);
        tm* ltm = localtime(&now);
        time_random = 1 + ltm->tm_sec;
        time_random = ((time_random + 354) * 64 - 74) / 8;
    }
    else
    {
        time_random = ((old_time_random + 354) * 64 - 74) / 8 + 34;
    }
    return time_random % 132;
}*/

void points(Player current_player, string last_played_word) {

}

void alpha_zapolnenie(char massive_alphabet[])
{
    int counter = 192;
    for (unsigned i{}; i < 132; i++)
    {
        if (counter == 197)
        {
            massive_alphabet[i] = counter;
            massive_alphabet[i + 1] = 'Ё';
            i++;
            counter++;
        }
        else if (counter == 223)
        {
            massive_alphabet[i] = counter;
            counter = 192;
        }
        else
        {
            massive_alphabet[i] = counter;
            counter++;
        }
    }
}

Player getting_letters_for_players(short id) {
    srand(time(0));
    Player player;
    player.id = id + 1;
    for (int i{}; i < 10; i++)
    {
        int random_number = rand() % counter + 1;
        if (massive_alphabet_public[random_number] != 0)
        {
            player.letters[i] = massive_alphabet_public[random_number];
            massive_alphabet_public[random_number] = 0;
            // cout << i + 1 << " буква в букваре 1 игрока это " << player.letters[i] << endl;
        }
        else
        {
            i--;
        }
    }
    return player;
}

/*void ssmain()
{

    setlocale(LC_ALL, "russian");
    SetConsoleCP(1251);
    Player player1;
    char letters[10] = { 'А','Р','К','А','Р','А','Р','К','А','Р' };
    for (unsigned short i{}; i < 10; i++) {
        player1.letters[i] = letters[i];
    }
    //26-29 вводится список букв игрока, он должен рандомам вводится
    fstream fin;
    fin.open("russian.txt");//открытие файла с библиотекой
    if (check_in_file("прикол", fin)) {//тут должно вводиться
        char check = check_for_user_word("АРКА", player1);
        if (check == 'c')
            cout << "человек ввёл правильное слово";
        //тут программа должна идти дальше
        else if (check == 'e')
            cout << "Человек ввёл слово с цифрами/пунктуацией или пробелами";
        // просьба ввести ещё раз
        else if (check == 'i')
            cout << "Человек ввёл слово состоящее не тольео из букв в его банке";
        // идёт отсчёт баллов
        else
            cout << "Человек ввёл пустую строку";
        // пропуск хода
    }
    system("pause");
}*/

void vuvod_igrokof(Player players[]) {
    for (short i = players_in_game - 1; i >= 0; i--) {
        cout << "Игрок " << players[i].id << "\n" << "Буквы: ";
        for (char c : players->letters) {
            cout << c << ", ";
        }
        cout << "\nБаллы: " << players[i].points << "\n\n";
    }
}

int end_screen()
{
    interface_end_screen();
    system("pause");
    cout << "\n Игра закончены. Введите \n 1--Сыграть ещё партейку \n 0--Выйти\n";
    int command;
    command = normal_command_input(0, 1);
    system("cls");
    return command;
}
// конец игры и статистика

//интерфейсы
void interface_line()
{
    cout << "\n\n";
    cout << "========================================================================================================================";
    cout << "\n\n";
}
// просто строка из = на всю консоль
void interface_Main_menu()
{
    interface_line();
    cout << "\n                                            ИГРА \"ЭРУДИТ\" \n";
    interface_line();

}

void interface_rules()
{
    interface_line();
    cout << "\n                                             This is rules \n";
    interface_line();
}

void interface_start()
{
    interface_line();
    cout << "\n                                             This is start \n";
    interface_line();
}

void interface_game()
{
    interface_line();
    cout << "\n                                             This is game \n";
    interface_line();
}

void interface_end_screen()
{
    interface_line();
    cout << "\n                                             This is end \n";
    interface_line();
}

void rules()
{
    interface_rules();
    system("pause");
    system("cls");
}
// правила

// проверки
int normal_command_input(int min_command, int max_command)
{
    // функция ввода комманд
    // первое значение -- с какой цифры
    // второе значение -- по какую цифру
    //должна вводится числовая комманда
    cout << endl;
    int command;
    cin >> command;
    while (min_command > command or max_command < command)
    {
        cout << "\n\nНеверный ввод. Введите число от " << min_command << " до " << max_command << ": ";
        cin >> command;
    }
    return command;

}
// проверка ввода для команд
char check_for_user_word(string user_word, Player current_player) {
    // возвращает код
    // с - correct
    // e - invalid enter
    // i - использованны буквы невходящие в банк букв игрока
    if (user_word.length() != 0) {
        int counter{};
        char player_letters[10]{};
        bool alredy_was_used = false;
        for (unsigned short i{}; i < 10; i++) {
            player_letters[i] = current_player.letters[i];
        }
        for (char c : user_word) {
            if (!(c >= 'А' && c <= 'Я') || !(c == 'Ё'))
                return 'e';
            for (unsigned short i{}; i < 10; i++) {
                if (c == player_letters[i] && !alredy_was_used) {
                    counter++;
                    player_letters[i] = '0';
                    alredy_was_used = true;
                }
            }
            alredy_was_used = false;
        }
        if (counter == user_word.length())
            return 'c';
        else
            return 'i';
    }
    else
        return 'o';
}

bool check_in_file(string search, fstream& fin)
// функция проверяет есть ли такое слово в нашем словаре
{
    using In = istream_iterator<string>;
    auto pos = find(In(fin), In(), search);
    if (pos != In())
        return true;
    else
        return false;
    fin.close();
}

int letters_in_alphabet() {
    int a{};
    for (unsigned i{}; i < 132; i++) {
        if (massive_alphabet_public[i] != '0')
            a++;
        else
            counter--;
    }
    return a;
}